i. What is Infrastructure As A Code? Infrastructure as Code is the process of provisioning and configuring an environment through code instead of manually setting up the required devices and systems. Once code parameters are defined, developers run scripts, and the IaC platform builds the cloud infrastructure automatically.
Such automatic IT setups enable teams to quickly create the desired cloud setting to test and run their software. Infrastructure as Code allows developers to generate any infrastructure component they need, including networks, load balancers, databases, virtual machines, and connection types.
Example: There are several tools that will to build your entire infrsutructure, by running a code which includes all the required resources that you need to build your application on top of it. 
ii. What is the difference between immutable infra vs mutable infra?
Mutable infrastructure is IT server infrastructure that is capable of being modified and updated in-place on a regular basis. Traditionally, server architectures have been mutable due to the greater short-term flexibility that the mutable approach provides. Example: OS upgrade for Hadoop. 
Immutable infrastructure refers to servers (or VMs) that are never modified after deployment. With an immutable infrastructure paradigm, servers work differently. We no longer want to update in-place servers. Instead, we want to ensure that a deployed server will remain intact, with no changes made. Example: If there is a requirement to change/upgrade any software in the server, in ummutable infra you will need to rebuild the same infrastructure with the upgraded version of software and make sure that everything works properly and then just reroute the traffic to newly built infrustructure. 
iii. What is the differences between imperative and declarative approach? The core of a declarative style language/tool is that you say what, whereas in an imperative style language you say how. In the case of IaC; for declarative you specify a list of resources you would like, whereas for imperative you specify a list of commands to run to create the resources that you want. A declarative instruction could be.. “Can I have a coffee on my desk at 9AM on Monday morning?” whereas the imperative version of the command could be… “Go to that machine, then get the glass jar, the fill it with water, then put it back in the machine” … you get the idea. Example: imperative approach you have to list all the steps in order, example would be installing new software, you have to install the new software first and then active the service, enable the service and etc. Declarative approach when you can specify your command however you want, but at the end you will get your derised end result. 
iv. What is idempotence? A Terraform configuration is idempotent when a second apply results in 0 changes. An idempotent configuration ensures that: What you define in Terraform is exactly what is being deployed. Detection of bugs in Terraform resources and providers that might affect your configuration. Exmaple: if you have a code to create one server and you have already run the code and your server is up and running, when you run your code second time it will not do any changes.
